import { c as create_ssr_component } from './index.js';

/* src/lib/content/assessments/cpnt-262/assignment-4.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Assignment 4 - Page Building in Vue/Nuxt",
	"type": "assignment",
	"points": 15
};

const Assignment_4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<h2 id="${"instructions"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#instructions"}"><span class="${"icon icon-link"}"></span></a>Instructions</h2>
<p>Web Frameworks like Vue and Nuxt give you the ability to create reusable components. This helps DRY out your code and separates the presentation and information layers of your website - increasing maintainability and code organization.</p>
<p>For this assignment, you will need to make 2 web pages that use the same components for repeating design patterns. Use the <code>HomeView.vue</code> and <code>AboutView.vue</code> pages that the vue cli provides and create your components in the <code>components/</code> directory. <em>Adjust syntax for whether you’re using vue 3 or nuxt 3</em></p>
<p>Deploy your site to Netlify.</p>
<h3 id="${"specifications"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#specifications"}"><span class="${"icon icon-link"}"></span></a>Specifications</h3>
<p><strong>Change syntax for Nuxt if you use that</strong></p>
<ul><li>Reuse the same general UI elements in the <code>App.vue</code> file (navigation bar and footer)</li>
<li>Use <code>&lt;RouterView /&gt;</code> in the <code>App.vue</code> page to inject your page content into the UI layout</li>
<li>Reuse layout components in your pages with props, slots, and class bindings for content and style variations<ul><li>Suggested Components (At least 5 components required):<ul><li>TheNav, TheFooter, TheMain, TheMainHeader</li>
<li>AppSection, AppSectionHeader,.. (truncate if preferred)</li>
<li>AppCard, AppList, AppListItem, AppButon, AppLink…</li></ul></li></ul></li>
<li>Reuse utility components in your pages and layout components</li></ul>
<h2 id="${"rubric"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#rubric"}"><span class="${"icon icon-link"}"></span></a>Rubric</h2>
<h3 id="${"component-reusability---5"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#component-reusability---5"}"><span class="${"icon icon-link"}"></span></a>Component Reusability - 5</h3>
<ul><li>Properly defined props and slots</li>
<li>class bindings used in page header for greater distinction</li>
<li>v-bind and moustache syntax used correctly</li>
<li>Components imported and rendered correctly</li></ul>
<h3 id="${"v-for-and-v-on---5"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#v-for-and-v-on---5"}"><span class="${"icon icon-link"}"></span></a>V-for and v-on - 5</h3>
<ul><li>lists and repeating content (3 card layout) uses v-for to render multiple items</li>
<li>v-for syntax used correctly</li>
<li>v-on used at least once for interactive content (minimal example is fine)</li></ul>
<h3 id="${"general-requirements---5"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#general-requirements---5"}"><span class="${"icon icon-link"}"></span></a>General Requirements - 5</h3>
<ul><li>Code Quality</li>
<li>README<ul><li>assignment info</li>
<li>attributions</li></ul></li>
<li>Design Assets<ul><li>Make one of the following to track your design visuals (if applicable):<ul><li>Mood board</li>
<li>Set of Issues</li></ul></li>
<li>Content (if applicable):<ul><li>screen shots of inspiration components</li>
<li>images of wireframes</li></ul></li></ul></li>
<li><strong>Site Deployed to Netlify</strong></li>
<li>Submission does not include node_modules folder</li></ul>
<h2 id="${"submission"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#submission"}"><span class="${"icon icon-link"}"></span></a>Submission</h2>
<ol><li>Create a GitHub repo of your project;</li>
<li>Download a ZIP of the project;</li>
<li>In Brightspace, submit your ZIP and include the following as a comment in your submission:<ul><li>a link to your GitHub repo;</li>
<li>A note on which files contain which components</li></ul></li></ol>
<h3 id="${"notes"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#notes"}"><span class="${"icon icon-link"}"></span></a>Notes</h3>
<ul><li>Do not push or zip node_modules</li>
<li>No forking other people’s repos</li>
<li>Options API and Composition API syntax are accepted</li>
<li>Style your components with any css approach that you want</li>
<li>Follow <a href="${"https://v2.vuejs.org/v2/style-guide/?redirect=true"}" rel="${"nofollow"}">VueJS naming conventions</a><ul><li>These guidelines give some room for flexibility, use what makes sense to you</li></ul></li></ul>`;
});

export { Assignment_4 as default, metadata };
