import { c as create_ssr_component } from './index.js';

/* src/lib/content/assessments/cpnt-262/achievements-2.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Achievements Round 2",
	"type": "achievements",
	"points": 6
};

const Achievements_2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<h2 id="${"marking-rubric"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#marking-rubric"}"><span class="${"icon icon-link"}"></span></a>Marking Rubric</h2>
<ul><li><strong>You will be graded for two 3-point mini-assignments</strong> (Achievements) in Round 2 for the <em>first half</em> of CPNT 262;</li>
<li>Submissions for Achievements Round 2 will close Monday, October 31st @ 11:59pm;</li>
<li>Achievements from Round 1 are <strong>not eligible</strong> for this Round.</li></ul>
<hr>
<h2 id="${"achievements"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#achievements"}"><span class="${"icon icon-link"}"></span></a>Achievements</h2>
<p>Submission Instructions:</p>
<ol><li>In Brightspace: submit a ZIP of relevant files to <em>Round 1</em>; </li>
<li>As a comment: share links to make it easy for the instructor to quickly evaluate your work:<ul><li>GH repos, Pages, Projects (Beta), etc.</li>
<li>Codepens, Figma, FigJam, etc.</li></ul></li>
<li>Double check the Achievement for specific instructions.</li>
<li>If applicable, include a README containing the following;<ul><li>Achievement name and author;</li>
<li>Attributions: <strong>Did anyone help you?</strong> Give credit to any classmates, articles, tutorials, etc that helped you complete this project.</li>
<li>Include self-assessments, observations, research, etc under the heading “Code Journal” in your README. </li></ul></li>
<li>Submit Achievements as you finish them; your Instructor will try to keep up!</li></ol>
<hr>
<h3 id="${"1-comma-separated-list-of-words"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#1-comma-separated-list-of-words"}"><span class="${"icon icon-link"}"></span></a>1. Comma-separated list of words</h3>
<p>Starting with an array of words such as:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> nouns <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">"cat"</span><span class="token punctuation">,</span>
  <span class="token string">"dog"</span><span class="token punctuation">,</span>
  <span class="token string">"hamster"</span><span class="token punctuation">,</span>
  <span class="token string">"parrot"</span><span class="token punctuation">,</span>
  <span class="token string">"dolphin"</span>
<span class="token punctuation">]</span></code>`}<!-- HTML_TAG_END --></pre>
<p>Print a complete sentence on the page that includes the list of words such that:</p>
<ul><li>they are separated by a comma and a space;</li>
<li>the last word is separated by the word “and”.</li></ul>
<p>Example output: “My favourite pets are the cat, dog, hamster, parrot and dolphin.”</p>
<hr>
<h3 id="${"2-studly-caps-spongebob-case"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#2-studly-caps-spongebob-case"}"><span class="${"icon icon-link"}"></span></a>2. Studly caps (SpongeBob case)</h3>
<p>Using a loop of your choice, create a function that changes a sentence into studly caps (aka: <a href="${"https://nymag.com/intelligencer/2017/05/what-is-the-mocking-spongebob-capitalized-letters-chicken-meme.html"}" rel="${"nofollow"}">mocking SpongeBob case</a>).</p>
<p>The function should accept a sentence as an argument:</p>
<blockquote><p><strong>“Can I get some extra credit?”</strong></p></blockquote>
<p>and return the same sentence in studly caps:</p>
<blockquote><p><strong>“cAn i GEt SomE eXtRa creDiT?”</strong></p></blockquote>
<p>Output this sentence to a web page.</p>
<hr>
<h3 id="${"3-intersection-observer-proof-of-concept"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#3-intersection-observer-proof-of-concept"}"><span class="${"icon icon-link"}"></span></a>3. Intersection Observer proof-of-concept</h3>
<p>Using the <a href="${"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"}" rel="${"nofollow"}">Intersection Observer API</a>, create a long HTML page that changes content as it scrolls into the viewport. For example, the content can:</p>
<ul><li>scroll into place,</li>
<li>fade in,</li>
<li>be highlighted in some way,</li>
<li>etc.</li></ul>
<p>Hint: There are many Intersection Observer tutorials that you can find online.</p>
<hr>
<h3 id="${"4-text-area-counter"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#4-text-area-counter"}"><span class="${"icon icon-link"}"></span></a>4. Text area counter</h3>
<p>Add a dynamic text character counter that displays the number of characters entered into a <code>&lt;textarea&gt;</code> element such that:</p>
<ul><li>Counter shows a dynamic count of characters present in a <code>&lt;textarea&gt;</code> element;</li>
<li>Counter updates as the user types;</li>
<li>A character limit is shown next to character count.</li></ul>
<p><img src="${"../../../images/assessments/text-area-counter.png"}" alt="${"Example of a text area counter"}"></p>
<p>See <a href="${"https://gist.github.com/acidtone/74727a562940ead812f46c1b1b870d19"}" rel="${"nofollow"}">this gist</a> for starter code and detailed instructions.</p>
<hr>
<h3 id="${"5-lttemplategt-element-proof-of-concept"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#5-lttemplategt-element-proof-of-concept"}"><span class="${"icon icon-link"}"></span></a>5. <code>&lt;template&gt;</code> Element proof-of-concept</h3>
<p><code>Element.innerHTML</code> is not considered the best method of adding HTML content to a page. </p>
<p>Create a proof-of-concept project that, instead, stores HTML in a <a href="${"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template"}" rel="${"nofollow"}"><code>&lt;template&gt;</code> element</a> which is cloned, modified and added to the page using Javascript.</p>
<ul><li>Use content of your choice that contains valid HTML elements;</li>
<li><code>&lt;template&gt;</code> content may be modified in a way of your choosing;</li>
<li>The new content may be displayed when the page loads (no user action required).</li></ul>
<p>For example, you may refactor any of the in-class examples shown thus far that uses <code>Element.innerHTML</code> to output content to the page.</p>`;
});

export { Achievements_2 as default, metadata };
