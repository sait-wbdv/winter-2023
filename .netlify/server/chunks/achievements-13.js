import { c as create_ssr_component } from './index.js';

/* src/lib/content/assessments/cpnt-262/achievements-1.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Achievements Round 1",
	"type": "achievements",
	"points": 9
};

const Achievements_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<h2 id="${"marking-rubric"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#marking-rubric"}"><span class="${"icon icon-link"}"></span></a>Marking Rubric</h2>
<p>Achievements will be marked differently than other Assignments in Brightspace:</p>
<ul><li><strong>You will be graded for three 3-point mini-assignments</strong> (Achievements) in one Round for the <em>first half</em> of CPNT 262;</li>
<li>Submissions for Achievements Round 1 will close Wednesday, October 19th @ 11:59pm;</li>
<li>You can choose from any of the following Achievements for this Round;</li></ul>
<hr>
<h2 id="${"achievements"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#achievements"}"><span class="${"icon icon-link"}"></span></a>Achievements</h2>
<p>Submission Instructions:</p>
<ol><li>In Brightspace: submit a ZIP of relevant files to <em>Round 1</em>; </li>
<li>As a comment: share links to make it easy for the instructor to quickly evaluate your work:<ul><li>GH repos, Pages, Projects (Beta), etc.</li>
<li>Codepens, Figma, FigJam, etc.</li></ul></li>
<li>Double check the Achievement for specific instructions.</li>
<li>If applicable, include a README containing the following;<ul><li>Achievement name and author;</li>
<li>Attributions: <strong>Did anyone help you?</strong> Give credit to any classmates, articles, tutorials, etc that helped you complete this project.</li>
<li>Include self-assessments, observations, research, etc under the heading “Code Journal” in your README. </li></ul></li>
<li>Submit Achievements as you finish them; your Instructor will try to keep up!</li></ol>
<hr>
<h3 id="${"1-plugin-away"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#1-plugin-away"}"><span class="${"icon icon-link"}"></span></a>1. Plugin Away</h3>
<p>3rd-party plugin/library implementation. Show that you’ve installed and implemented a 3rd party plugin or service from the following list:</p>
<ul><li>Suggestions for beginners:<ul><li><a href="${"https://www.chartjs.org/"}" rel="${"nofollow"}">ChartJS</a>: Simple yet flexible JavaScript charting for designers &amp; developers.</li>
<li><a href="${"https://lodash.com/"}" rel="${"nofollow"}">lodash</a></li>
<li><a href="${"https://animejs.com/"}" rel="${"nofollow"}">anime.js</a></li></ul></li>
<li>For more inspiration see (or a similar “Best Of” list):<ul><li><a href="${"https://www.freecodecamp.org/news/10-javascript-libraries-you-should-try/"}" rel="${"nofollow"}">10 Awesome JavaScript Libraries You Should Try Out in 2021</a></li>
<li><a href="${"https://kinsta.com/blog/javascript-libraries/"}" rel="${"nofollow"}">The 40 Best JavaScript Libraries and Frameworks for 2022</a></li></ul></li></ul>
<p><strong>Instructions</strong></p>
<ol><li>Using the documentation provided by the library, follow the instructions and install the library.<ul><li>Suggestions for beginners:<ul><li>Avoid installation methods using <code>npm</code> or <code>yarn</code></li>
<li>Libraries with a <a href="${"https://www.cloudflare.com/en-ca/learning/cdn/what-is-a-cdn/"}" rel="${"nofollow"}">CDN</a> option are generally easier to install. </li></ul></li></ul></li>
<li>Create a simple demo that shows a working implementation.</li></ol>
<hr>
<h3 id="${"2-before-and-after"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#2-before-and-after"}"><span class="${"icon icon-link"}"></span></a>2. Before and After</h3>
<p>Show your knowledge of Javascript <code>Number</code>, <code>String</code> and <code>Array</code> methods and properties.</p>
<p><strong>Instructions</strong></p>
<ol><li><p>Create an empty <code>index.html</code> page;</p></li>
<li><p>Choose a <code>Number</code>, <code>String</code> or <code>Array</code> achievement below; </p></li>
<li><p>Complete the chosen achievement as either:</p>
<ul><li>embedded Javascript in a <code>&lt;script&gt;</code> element just before the <code>&lt;/body&gt;</code> tag, OR;</li>
<li>an external <code>client.js</code> (or similar) file linked in the <code>&lt;head&gt;</code> with a deferred <code>&lt;script&gt;</code> element.</li></ul></li>
<li><p>In your Javascript, log an initial <code>Number</code>, <code>String</code> or <code>Array</code> value (of your choice) to the console with the “Before” label as a first argument:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Before"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre></li>
<li><p>Modify your initial value using at least three methods or properties from the relevant list below:</p>
<pre class="${"language-js"}"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> squared <span class="token operator">=</span> number <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> remainder <span class="token operator">=</span> number <span class="token operator">%</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"After - squared"</span><span class="token punctuation">,</span> squared<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"After - remainder"</span><span class="token punctuation">,</span> remainder<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"After - as money"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">$</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>number<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`}<!-- HTML_TAG_END --></pre>
<ul><li>You may log multiple “After” values or just one if you’re modifying the same value multiple times;</li></ul></li>
<li><p>Zip, push and submit as normal to Achievements Round 1.</p></li></ol>
<p><strong>You may submit one, two, or three of the following achievements for Round 1 for 3 points each.</strong></p>
<p><strong>Number Achievement</strong><br>
Display or modify your chosen <code>number</code> with at least <strong>three</strong> of the following:</p>
<ul><li>Increment or decrement a number using <code>++</code>/<code>--</code>;</li>
<li>Convert a <code>number</code> to a string with <code>Number.toString()</code>;</li>
<li>Convert a <code>number</code> to exponential notation with <code>Number.toExponential()</code>;</li>
<li>Convert a <code>number</code> to a string with a given number of decimals with <code>Number.toFixed()</code>;</li>
<li>Convert a <code>number</code> to a given number of floating point decimals with <code>Number.toPrecision()</code>;</li>
<li>Convert a <code>number</code> to a language-sensitive string representation with <code>Number.toLocaleString()</code></li>
<li>Convert a <code>number</code> or <code>string</code> to an integer with <code>Number.parseInt()</code></li>
<li>Convert a <code>number</code> or <code>string</code> to a floating point number with <code>Number.parseFloat()</code></li>
<li>Check if a <code>number</code> is an integer with <code>Number.isInteger()</code></li>
<li>Check if a “number” is actually a <code>number</code> with <code>Number.isNaN()</code></li>
<li>Check if a <code>number</code> is finite with <code>Number.isFinite()</code></li></ul>
<p>-OR-</p>
<p><strong>String Achievement</strong><br>
Display or modify your chosen <code>string</code> with at least <strong>three</strong> of the following:</p>
<ul><li>Show the number of characters in your <code>string</code> with <code>String.length</code>;</li>
<li>Show a sub-string of your <code>string</code> with <code>String.substr()</code> or <code>String.substring()</code>;</li>
<li>Show a sub-string of your <code>string</code> with <code>String.slice()</code>;</li>
<li>Show the first character of your <code>string</code>;</li>
<li>Show the last character of your <code>string</code>;</li>
<li>Show the first <code>index</code> of a word that can be found in your string with <code>String.indexOf()</code>;</li>
<li>Replace a word or phrase in your <code>string</code> with a new word or phrase using <code>String.replace()</code> or <code>String.replaceAll()</code>;</li>
<li>Concatenate two strings with <code>String.concat()</code>;</li>
<li>Use <code>String.startsWith()</code> to show if your <code>string</code> starts with a word of your choice;</li>
<li>Use <code>String.endsWith()</code> to show if your <code>string</code> starts with a word of your choice;</li>
<li>Use <code>String.includes()</code> to show if a substring is present in your <code>string</code>;</li></ul>
<hr>
<h3 id="${"3-proof-of-work"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#3-proof-of-work"}"><span class="${"icon icon-link"}"></span></a>3. Proof of Work</h3>
<p>Submit code that you have written based on:</p>
<ul><li>a course</li>
<li>a tutorial</li>
<li>documentation example</li>
<li>etc.</li></ul>
<p><strong>Examples</strong>:</p>
<ul><li><a href="${"https://www.youtube.com/playlist?list=PLnHJACx3NwAdQElswAscNtHAZLAQYgpDA"}" rel="${"nofollow"}">Playlist of Javascript exercises</a> by Coding Addict</li></ul>
<p><strong>Requirements</strong>:</p>
<ul><li>Courses shouldn’t have Hints that make it easy to submit code you haven’t written yourself;</li>
<li>Tutorials shouldn’t provide examples of finished code;</li></ul>
<p><strong>BUT</strong> if Hints or sample code exist, you may submit an Achievement if you’ve proven that you’ve written the code yourself and/or changed, improved, refactored the code, such as:</p>
<ul><li>Do the same thing, but in a different way;</li>
<li>You improve/refactored the code provided;</li>
<li>You’ve customized the code in your own unique project/activity.</li></ul>
<p><strong>Include in your Submission</strong>:</p>
<ul><li><strong>Before</strong> example of what’s provided by the resource (if necessary);</li>
<li><strong>After</strong> example of what you’ve done to refactor the code;</li>
<li><strong>Code comments</strong> describing what you changed and how/why;</li>
<li>If necessary, add a <strong>submission comment</strong> on why you think this code should qualify as an Achievement.</li></ul>
<hr>`;
});

export { Achievements_1 as default, metadata };
