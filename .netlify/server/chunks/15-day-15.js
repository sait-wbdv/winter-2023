import { c as create_ssr_component } from './index.js';

/* src/lib/content/courses/cpnt-262/15-day-15.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Loops, Conditionals, Events",
	"excerpt": null,
	"status": "draft"
};

const _15_day_15 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<h2 id="${"list-rendering-and-v-for"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#list-rendering-and-v-for"}"><span class="${"icon icon-link"}"></span></a>List Rendering and v-for</h2>
<ul><li><a href="${"https://vuejs.org/guide/essentials/list.html"}" rel="${"nofollow"}">Documentation</a></li>
<li>Follow up with notes from yesterday</li></ul>
<h3 id="${"activity-render-an-array-using-a-v-for"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-render-an-array-using-a-v-for"}"><span class="${"icon icon-link"}"></span></a>Activity: Render an Array using a v-for</h3>
<ul><li>Create an array of strings in your script tags of HomeView</li>
<li>Create a ul and put a v-for on an li inside of it</li>
<li>Follow the abovenoted documentation for syntax</li>
<li>Render the strings in a list</li></ul>
<h2 id="${"conditional-directives"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#conditional-directives"}"><span class="${"icon icon-link"}"></span></a>Conditional Directives</h2>
<ul><li><a href="${"https://vuejs.org/guide/essentials/conditional.html#conditional-rendering"}" rel="${"nofollow"}">Conditional Rendering</a></li>
<li><a href="${"https://vuejs.org/api/built-in-directives.html#v-if"}" rel="${"nofollow"}">v-if</a>,v-else, and v-else-if: Render content conditionally. This will remove and add content in the DOM.</li>
<li><a href="${"https://vuejs.org/api/built-in-directives.html#v-show"}" rel="${"nofollow"}">v-show</a>: This will make content visible and invisible by setting the display to none or block (use for things that get toggled a lot). it’s a lighter visibility switch than v-if/else. <a href="${"https://learnvue.co/tutorials/v-if-vs-v-show"}" rel="${"nofollow"}">tutorial that compares v-if to v-show</a></li></ul>
<h3 id="${"use-cases"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#use-cases"}"><span class="${"icon icon-link"}"></span></a>Use Cases</h3>
<ul><li>to display content conditionally</li>
<li>show the user specific info depending on the situation</li>
<li>error handling</li>
<li>accomodating variations in layout</li></ul>
<h3 id="${"activity-set-content-to-show-conditionally"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-set-content-to-show-conditionally"}"><span class="${"icon icon-link"}"></span></a>Activity: Set content to show conditionally</h3>
<ul><li>Set a boolean value in the script</li>
<li>use v-if and v-else to make the content disappear and reappear</li></ul>
<hr>
<h3 id="${"event-directive"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#event-directive"}"><span class="${"icon icon-link"}"></span></a>Event Directive</h3>
<ul><li><a href="${"https://vuejs.org/api/built-in-directives.html#v-on"}" rel="${"nofollow"}">v-on</a> for handling events and functions (use this for things like your hamburger menu)</li></ul>
<h2 id="${"event-handling"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#event-handling"}"><span class="${"icon icon-link"}"></span></a>Event Handling</h2>
<ul><li><a href="${"https://vuejs.org/guide/essentials/event-handling.html"}" rel="${"nofollow"}">Documentation</a></li>
<li><a href="${"https://gist.github.com/lilyx13/74543137780c1958f01e9b470a3cb13b"}" rel="${"nofollow"}">v-on gist</a> with notes on how to use <code>v-on</code></li>
<li><code>v-on</code> is used to listen to DOM events and trigger a javascript handler (often a function)</li>
<li>syntax: <code>v-on:click=&quot;handler&quot;</code><ul><li>or shortened as<code>@click=&quot;handler</code></li></ul></li>
<li>Use this for any buttons on a page<ul><li>set the handler to be a function</li></ul></li>
<li>This can be used with the <a href="${"https://vuejs.org/guide/essentials/template-refs.html"}" rel="${"nofollow"}"><code>ref()</code></a> to make variables more reactive</li></ul>
<h3 id="${"event-modifiers"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#event-modifiers"}"><span class="${"icon icon-link"}"></span></a>Event Modifiers</h3>
<ul><li>To stop a form from being submitted when using a <code>&lt;button&gt;</code>, or to stop other default behaviour, use <code>.prevent</code><ul><li><code>@click.prevent=&quot;myFunction</code></li>
<li>Check out the other event modifiers<ul><li><code>@click.once</code> - will only trigger once</li>
<li><code>@click.passive</code> - great for touch events</li></ul></li>
<li>Key modifiers allow for effecting how an event handler is triggered</li>
<li>You can specify specific keys using key aliases and key modifiers</li></ul></li></ul>
<h4 id="${"creating-switches"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#creating-switches"}"><span class="${"icon icon-link"}"></span></a>Creating Switches</h4>
<ul><li>To make reactive switches, you’ll want to use the following syntax</li>
<li><code>let variable = reactive({val: false})</code><ul><li>this will make a reactive variable that response to v-on well</li></ul></li>
<li><code>const variableSwitch = () =&gt; variable.val = !variable.val</code><ul><li>this will create a switch that changes the variable to false</li></ul></li>
<li><code>&lt;button @click.prevent=&quot;variableSwitch&quot;&gt;Click me&lt;/button&gt;</code><ul><li>note that this doesn’t need to be a button</li></ul></li></ul>
<h3 id="${"activity-make-a-toggle"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-make-a-toggle"}"><span class="${"icon icon-link"}"></span></a>Activity: Make a toggle</h3>
<ul><li>Create a toggle for the v-if that we made in the last activity</li>
<li>Add a <code>@click.prevent</code> directive to a button</li>
<li>Make the event switch the boolean variable between true and false<ul><li><code>variable = !variable</code></li></ul></li>
<li>See your content change!</li></ul>
<hr>
<h2 id="${"lab-time"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#lab-time"}"><span class="${"icon icon-link"}"></span></a>Lab Time</h2>
<ul><li>Work on your assignment</li>
<li>Practice using vue directives to render content</li>
<li>Look at an old project and map out how you would organize the code into components and pages (pen and paper or whatever medium works)</li></ul>`;
});

export { _15_day_15 as default, metadata };
