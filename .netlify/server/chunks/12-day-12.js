import { c as create_ssr_component } from './index.js';

/* src/lib/content/courses/cpnt-262/12-day-12.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Intro to VueJS",
	"excerpt": null,
	"status": "draft"
};

const _12_day_12 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<ul><li><a href="${"https://github.com/sait-wbdv/f22-vue-content"}" rel="${"nofollow"}">Fall 2022 Vue Demo Content Repository</a></li></ul>
<h2 id="${"morning-javascript-activity-20-min"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#morning-javascript-activity-20-min"}"><span class="${"icon icon-link"}"></span></a>Morning Javascript Activity (20 min)</h2>
<ul><li><a href="${"https://gist.github.com/lilyx13/05fb0d9693b47411fbb6de4609face1a"}" rel="${"nofollow"}">JS Warmup Gist</a><ul><li>Refresh on variables</li>
<li>Use some conditionals and methods</li>
<li>Ask questions and review docs if you get stuck</li>
<li>You’re not expected to finish all of this in 20 minutes</li></ul></li></ul>
<h2 id="${"frontend-frameworks"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#frontend-frameworks"}"><span class="${"icon icon-link"}"></span></a>Frontend Frameworks</h2>
<ul><li>Frontend Frameworks are designed to make complex websites and applications easier to create. They offer many advances over traditional vanilla html + css + js.</li>
<li><a href="${"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction"}" rel="${"nofollow"}">Check out Mozillas Documentation on what a frontend framework is</a></li>
<li>Frontend Frameworks can be used for:<ul><li><a href="${"https://en.wikipedia.org/wiki/Single-page_application"}" rel="${"nofollow"}">Single Page Applications — SPA</a> loads website on the client side</li>
<li><a href="${"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Introduction"}" rel="${"nofollow"}">Server Side Rendered — SSR</a> loads website on the server first</li>
<li><a href="${"https://www.netlify.com/blog/2020/04/14/what-is-a-static-site-generator-and-3-ways-to-find-the-best-one/"}" rel="${"nofollow"}">Static Site Generation</a> A static prebuilt site is served to the user (SSG like Nuxt will then ‘rehydrate’ on the client side, providing a dynamic experience)</li></ul></li>
<li>Popular Frameworks:<ul><li><a href="${"https://reactjs.org/"}" rel="${"nofollow"}">React</a> (Facebook)</li>
<li><a href="${"https://angular.io/"}" rel="${"nofollow"}">Angular</a> (Google)</li>
<li><a href="${"https://vuejs.org/"}" rel="${"nofollow"}">Vue</a> (Independent/Community)</li>
<li><a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a> (Independent/Community)</li></ul></li></ul>
<h3 id="${"whats-the-difference-between-vue-and-nuxt"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#whats-the-difference-between-vue-and-nuxt"}"><span class="${"icon icon-link"}"></span></a>What’s the difference between Vue and Nuxt?</h3>
<ul><li>Nuxt is built using Vue. It is a Vue Framework that offers a lot of functionality built into it</li>
<li>Vue is the essential core of <a href="${"https://nuxtjs.org"}" rel="${"nofollow"}">Nuxt</a>, just like React is the essential core of <a href="${"https://nextjs.org/"}" rel="${"nofollow"}">Next</a></li>
<li>Nuxt provides project organization, build tool setup, and an easy way to handle modules and plugins, it also offers static site generation out of the box</li></ul>
<hr>
<h2 id="${"project-setup-walkthrough"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#project-setup-walkthrough"}"><span class="${"icon icon-link"}"></span></a>Project Setup Walkthrough</h2>
<ul><li><a href="${"https://vuejs.org/guide/quick-start.html#creating-a-vue-application"}" rel="${"nofollow"}">Documentation</a><ul><li>install command <code>npm init vue@latest</code></li>
<li>Tip: Don’t install eslint and prettier at this step. you’ll understand what’s happening better if you work through it separately.</li>
<li>You don’t need typescript in this course</li>
<li>Add the router</li></ul></li></ul>
<h3 id="${"activity-set-up-a-basic-vue-install-and-edit-files-20-minutes"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-set-up-a-basic-vue-install-and-edit-files-20-minutes"}"><span class="${"icon icon-link"}"></span></a>Activity: Set up a basic vue install and edit files (20 minutes)</h3>
<ul><li>Install vue as we did in the demo</li>
<li>Edit html in the <strong>template</strong> tags</li>
<li>Add html to the <code>App.vue</code> file as well as the <code>HomeView.vue</code> file<ul><li>Take now of how the content is organized</li></ul></li>
<li>Add css into the <code>&lt;style scoped&gt;</code> tags of each page</li></ul>
<h2 id="${"formatting-and-linting-configuration"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#formatting-and-linting-configuration"}"><span class="${"icon icon-link"}"></span></a>Formatting and Linting Configuration</h2>
<ul><li>Use the Volar Extension</li>
<li>Check the Readme in <a href="${"https://github.com/sait-wbdv/f22-vue-content/tree/utils"}" rel="${"nofollow"}">the f22 repo utils branch</a> for tutorials on setting up prettier and eslint with vue, vite, and tailwind.</li></ul>
<hr>
<h4 id="${"anatomy-of-a-single-file-component"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#anatomy-of-a-single-file-component"}"><span class="${"icon icon-link"}"></span></a>Anatomy of a Single File Component</h4>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">&lt;script setup&gt;

// Write Javascript here

&lt;/script&gt;


&lt;!-- Write HTML here --&gt;



&lt;style scoped&gt;

/* Write CSS here */

&lt;style&gt;</code>`}<!-- HTML_TAG_END --></pre>
<ul><li>All 3 are not always required.</li>
<li>using <code>style scoped</code>, you can keep your css variables bound at the component level, which increases modularity of your code</li>
<li>You can rearrange the tags in any order.</li></ul>
<hr>
<h3 id="${"vue-directives-basics"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#vue-directives-basics"}"><span class="${"icon icon-link"}"></span></a>Vue Directives Basics</h3>
<ul><li>Vue has a set of templating directives that you can use to add content to a web page. There are lots and they are all useful for different things. Today we will cover a couple basics to get you started</li>
<li><a href="${"https://vuejs.org/api/built-in-directives.html"}" rel="${"nofollow"}">Directives List</a></li></ul>
<h4 id="${"v-bind"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#v-bind"}"><span class="${"icon icon-link"}"></span></a><a href="${"https://vuejs.org/api/built-in-directives.html#v-bind"}" rel="${"nofollow"}"><code>v-bind</code></a></h4>
<ul><li>This is one of the most important. it allows you to bind data to html properties such as <code>src</code> in an img tag</li>
<li>You can also use it to bind styles <a href="${"https://vuejs.org/api/sfc-css-features.html#v-bind-in-css"}" rel="${"nofollow"}">v-bind css</a></li>
<li>It can be written out as <code>v-bind:src=&quot;variableName&quot;</code> or by using the shorthand <code>:</code> as in <code>:src=&quot;variableName</code></li>
<li>Example:</li></ul>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">&lt;img :src=&quot;cat.photo&quot; :alt=&quot;cat.description&quot; /&gt;</code>`}<!-- HTML_TAG_END --></pre>
<h3 id="${"binding-styles"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#binding-styles"}"><span class="${"icon icon-link"}"></span></a>Binding Styles</h3>
<ul><li>You can also bind classes!</li>
<li>Make content visible/invisible based on specific parameters</li></ul>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">&lt;p :class=&quot;answer == !answer ? &#39;text-red-500&#39; : &#39;text-green-500&#39;&quot; class=&quot;text-xl&quot;&gt;This is some text&lt;/p&gt;</code>`}<!-- HTML_TAG_END --></pre>
<ul><li>In this example, if the variable “answer” was false, then the text would be red, otherwise it would be green</li></ul>
<hr>
<h2 id="${"vue-composition-api-vs-options-api"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#vue-composition-api-vs-options-api"}"><span class="${"icon icon-link"}"></span></a>Vue Composition API vs Options API</h2>
<ul><li>When you look up Vue documentation and examples, you’ll find two distinct types of syntax being used. One is the <strong>options api</strong> and the other is the <strong>composition api</strong>.</li>
<li>The Options API is older and will be eventually replaced by the composition api</li>
<li>They are both useful ways of structuring the logic for your code. They handle your variables, functions, and props.</li>
<li><a href="${"https://vuejs.org/api/"}" rel="${"nofollow"}">API Reference Appendix</a></li>
<li><strong>In this class we will default to the composition api</strong></li></ul>
<h3 id="${"comparative-example"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#comparative-example"}"><span class="${"icon icon-link"}"></span></a>Comparative Example</h3>
<ul><li>Options API</li></ul>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">&lt;script&gt;
export default &#123;
  data() &#123;
    variableKey: &#39;Variable Value&#39;
  &#125;
&#125;
&lt;/script&gt;</code>`}<!-- HTML_TAG_END --></pre>
<ul><li>Composition API</li></ul>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">&lt;script setup&gt;
const variableKey = &#39;Variable Value&#39;
&lt;/script&gt;</code>`}<!-- HTML_TAG_END --></pre>
<hr>
<h2 id="${"lab-time"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#lab-time"}"><span class="${"icon icon-link"}"></span></a>Lab Time</h2>
<ul><li>Create javascript variables just like we did this morning in the <code>&lt;script setup&gt;&lt;/script&gt;</code> tags of one of the pages</li>
<li>Use v-bind syntax from class to render your variables on the page</li>
<li>Use Conditionals to change the css of something on a page</li>
<li>Manipulate the variables with JS to render them differently</li>
<li>Add <a href="${"https://tailwindcss.com/docs/guides/vite"}" rel="${"nofollow"}">tailwind</a> and style your content</li>
<li>Configure prettier and eslint as per the notes in the <a href="${"https://github.com/sait-wbdv/f22-vue-content/tree/utils"}" rel="${"nofollow"}">utils branch</a></li></ul>
<h2 id="${"homework"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#homework"}"><span class="${"icon icon-link"}"></span></a>Homework</h2>
<ul><li>Steps 1-7 of the <a href="${"https://vuejs.org/tutorial/#step-1"}" rel="${"nofollow"}">Vue Tutorial</a><ul><li>use SFC and Composition modes</li></ul></li>
<li>Read:<ul><li><a href="${"https://vuejs.org/guide/introduction.html#the-progressive-framework"}" rel="${"nofollow"}">Vue Introduction</a></li>
<li><a href="${"https://vuejs.org/guide/essentials/application.html#app-configurations"}" rel="${"nofollow"}">App Configurations</a></li>
<li><a href="${"https://vuejs.org/guide/essentials/template-syntax.html#attribute-bindings"}" rel="${"nofollow"}">Template Syntax</a></li>
<li><a href="${"https://vuejs.org/guide/components/props.html"}" rel="${"nofollow"}">Props</a></li></ul></li></ul>`;
});

export { _12_day_12 as default, metadata };
