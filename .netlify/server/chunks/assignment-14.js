import { c as create_ssr_component } from './index.js';

/* src/lib/content/assessments/cpnt-262/assignment-1.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Assignment 1 - Push of a button",
	"type": "assignment",
	"points": 5
};

const Assignment_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<p>In this assignment, you will create a DOM variable for a button, add an event listener and modify a page when the button is clicked.</p>
<h2 id="${"button-action"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#button-action"}"><span class="${"icon icon-link"}"></span></a>Button action</h2>
<p>Your button may perform an action of your choice, such as print:</p>
<ul><li>A random item in an array;</li>
<li>A greeting to the user;</li>
<li>A calculation;</li></ul>
<hr>
<h2 id="${"instructions"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#instructions"}"><span class="${"icon icon-link"}"></span></a>Instructions</h2>
<ol><li>Create a <code>&lt;button&gt;</code> and empty <code>&lt;p&gt;</code> element (or similar) on an HTML page;</li>
<li>Create HTML variables for each element;</li>
<li>Using an Event Listener and callback function, change the content of the <code>&lt;p&gt;</code> when the button is clicked;</li>
<li>Place your app in a validated HTML file named <code>index.html</code>. JS may be either be either:<ul><li>embedded in a <code>script</code> element before the <code>&lt;/body&gt;</code>, OR;</li>
<li>linked as an external script in the <code>&lt;head&gt;</code> of the document.</li></ul></li></ol>
<hr>
<h2 id="${"marking-rubric"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#marking-rubric"}"><span class="${"icon icon-link"}"></span></a>Marking Rubric</h2>
<p><strong>Each of the following requirements will be worth 1 point</strong> for a total of 5 points.</p>
<h3 id="${"button-element"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#button-element"}"><span class="${"icon icon-link"}"></span></a>Button element</h3>
<ul class="${"contains-task-list"}"><li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Create a valid <code>&lt;button&gt;</code> element on a page;</li>
<li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Style the button so that it doesn’t use default borders, colours, padding, etc;</li>
<li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Add <code>:hover</code> and <code>:active</code> styles to the button;</li>
<li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Create a Javascript variable that contains your button, using <code>document.querySelector()</code> with a selector of your choice;</li></ul>
<h3 id="${"event-listener-with-callback-function"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#event-listener-with-callback-function"}"><span class="${"icon icon-link"}"></span></a>Event listener with callback function</h3>
<ul class="${"contains-task-list"}"><li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Create a named callback function that will modify your page;</li>
<li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Add an event listener to your button that invokes your callback function when the button is clicked;</li>
<li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Use a <code>Number</code>, <code>String</code> or <code>Array</code> method to modify a value using the callback function, such as:<ul><li><code>Number.toFixed()</code>;</li>
<li><code>String.substr()</code>;</li>
<li><code>Array.join()</code>.</li></ul></li></ul>
<h3 id="${"document-modification"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#document-modification"}"><span class="${"icon icon-link"}"></span></a>Document modification</h3>
<ul class="${"contains-task-list"}"><li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Use <code>Element.innerHTML()</code> to change the content of a DOM element;</li>
<li class="${"task-list-item"}"><input type="${"checkbox"}" disabled> Use template literals to wrap content inside a new HTML element that’s not already on the page;</li></ul>
<h3 id="${"above-and-beyond"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#above-and-beyond"}"><span class="${"icon icon-link"}"></span></a>Above and Beyond</h3>
<p>Show off your coding skills by using ONE (use of more than one does not guarantee more marks) of the following:</p>
<ul><li>Use <code>prompt()</code> to print a dynamic message to the page, OR;</li>
<li>Use <code>Element.classList()</code> to add or change an element’s class attribute, OR;</li>
<li>Add an event listener to a form control other than a button:<ul><li>checkbox;</li>
<li>radio button;</li>
<li>select menu.</li></ul></li></ul>
<p>Provide a clear indication of which option you’ve chosen in your README (see below):</p>
<ul><li>Which did you choose?</li>
<li>What file(s) and line number(s) can it be found?</li></ul>
<h3 id="${"documentation-and-code-readability"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#documentation-and-code-readability"}"><span class="${"icon icon-link"}"></span></a>Documentation and Code Readability</h3>
<ul><li>Include a <code>README.md</code> in your project that contains the following information:<ul><li>Course title;</li>
<li>Assignment name;</li>
<li>Author name;</li>
<li>A link to the GH Pages site</li></ul></li>
<li><strong>Important</strong>: Any attributions for code and/or assets you used that are not your own;</li>
<li>Follow guidlines in <a href="${"https://sait-wbdv.github.io/slides/f22/cpnt-262/js-introduction.html"}" rel="${"nofollow"}">Javascript Basics</a> slides;</li>
<li>Follow guidelines in <a href="${"https://gist.github.com/acidtone/d77059ec1851eff266339a3df70f6984"}" rel="${"nofollow"}">Files and Directories - Naming Conventions</a></li></ul>
<hr>
<h2 id="${"submission-requirements"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#submission-requirements"}"><span class="${"icon icon-link"}"></span></a>Submission Requirements</h2>
<ul><li>Push this assignment to a GitHub repo named <code>cpnt262-a1</code> and enable GitHub Pages;</li>
<li>ZIP all files required for the site to operate and submit to Brightspace;</li>
<li>Include the following as a comment in your Brightspace submission:<ul><li>GH repo</li>
<li>GH Pages site</li></ul></li></ul>`;
});

export { Assignment_1 as default, metadata };
