import { c as create_ssr_component } from './index.js';

/* src/lib/content/assessments/cpnt-262/assignment-3.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Assignment 3 - Crafting Components",
	"type": "assignment",
	"points": 10
};

const Assignment_3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<h2 id="${"instructions"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#instructions"}"><span class="${"icon icon-link"}"></span></a>Instructions</h2>
<ol><li>Create a vue project named <code>cpnt-262-assignment-3</code></li>
<li>Create a header component<ul><li>Use moustache syntax to render information that is stored in the script tag of the component (do not write it statically)</li>
<li>use a <code>slot</code> to add more flexibility to the content<ul><li>Add either an image or some text from the parent page</li></ul></li>
<li>Use the header component on the HomeView Page</li></ul></li>
<li>Create a list component<ul><li>Apply the list onto your HomeView Page</li>
<li>render your content with a <code>v-for</code></li></ul></li>
<li>Create a footer component<ul><li>Your copyright information should be stored inside your footer component</li></ul></li>
<li>Create a card or navbar component<ul><li>if navbar, use on App.vue, if a card, make a 3 card layout using a v-for on the HomeView or AboutView pages</li></ul></li></ol>
<hr>
<h2 id="${"rubric"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#rubric"}"><span class="${"icon icon-link"}"></span></a>Rubric</h2>
<h3 id="${"component-structure---5"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#component-structure---5"}"><span class="${"icon icon-link"}"></span></a>Component Structure - 5</h3>
<ul><li>A header (page header) component</li>
<li>A footer component</li>
<li>List and list item components</li>
<li>Either a card or navbar component with appropriate sub components</li></ul>
<h3 id="${"syntax---5"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#syntax---5"}"><span class="${"icon icon-link"}"></span></a>Syntax - 5</h3>
<ul><li>v-bind used for content and at least 1 class tag</li>
<li>props have type and default value</li>
<li>v-for used for any repeating content</li>
<li>use javascript variables to reduce static text on pages</li>
<li>minimal styling</li></ul>
<hr>
<h2 id="${"submission"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#submission"}"><span class="${"icon icon-link"}"></span></a>Submission</h2>
<ol><li>Create a GitHub repo of your project;</li>
<li>Download a ZIP of the project;</li>
<li>In Brightspace, submit your ZIP and include the following as a comment in your submission:<ul><li>a link to your GitHub repo;</li>
<li>A note on which files contain which components</li></ul></li></ol>
<h3 id="${"notes"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#notes"}"><span class="${"icon icon-link"}"></span></a>Notes</h3>
<ul><li>Do not push node_modules</li>
<li>No forking other peopleâ€™s repos</li>
<li>Options API and Composition API syntax are accepted</li>
<li>Style your components with any css approach that you want</li>
<li>Follow <a href="${"https://v2.vuejs.org/v2/style-guide/?redirect=true"}" rel="${"nofollow"}">VueJS naming conventions</a><ul><li>These guidelines give some room for flexibility, use what makes sense to you</li>
<li><strong>hard rule</strong> 2+ word component names</li></ul></li></ul>`;
});

export { Assignment_3 as default, metadata };
