import { c as create_ssr_component } from './index.js';

/* src/lib/content/courses/cpnt-262/18-day-18.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Intro to Nuxt 3",
	"excerpt": null,
	"status": "draft"
};

const _18_day_18 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<p>Intro to Nuxt</p>
<ul><li>Nuxt 3 is a frontend framework built around VueJS<ul><li>It uses vue syntax but bundles a lot of features<ul><li><a href="${"https://nuxt.com/docs/getting-started/routing"}" rel="${"nofollow"}">Filesystem Routing</a></li>
<li><a href="${"https://nuxt.com/docs/guide/concepts/auto-imports"}" rel="${"nofollow"}">Auto Imported Components</a></li>
<li><a href="${"https://nuxt.com/docs/getting-started/deployment#static-hosting"}" rel="${"nofollow"}">Static Generation, Server Side Rendered, Single Page Application</a></li>
<li><a href="${"https://nuxt.com/modules"}" rel="${"nofollow"}">Modules to Extend Functionality</a></li>
<li>It has the <a href="${"https://nuxt.com/docs/migration/server#server"}" rel="${"nofollow"}">nitro h3 microserver</a> built into it, so you can set up routing like you would with <a href="${"https://expressjs.com/"}" rel="${"nofollow"}">Node Express</a></li></ul></li></ul></li>
<li>All Vue syntax is valid in Nuxt<ul><li>However it’s built around and optimized for Vue 3 and composition api syntax</li></ul></li>
<li>Nuxt 3 is designed to be a 1 stop solution for web pages and applications</li>
<li>It is also easy to deploy to services like Netlify, Vercel, or Github Pages</li>
<li><a href="${"https://www.youtube.com/watch?v=GBdO5myZNsQ&list=PL4cUxeGkcC9haQlqdCQyYmL_27TesCGPC&index=1"}" rel="${"nofollow"}">Video: What is Nuxt?</a> — this is the first video in the series linked in the next section.</li></ul>
<h3 id="${"nuxtjs-resources"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#nuxtjs-resources"}"><span class="${"icon icon-link"}"></span></a>NuxtJS Resources</h3>
<ul><li><a href="${"https://nuxt.com/"}" rel="${"nofollow"}">Official Documentation</a></li>
<li><a href="${"https://nuxt.com/modules"}" rel="${"nofollow"}">Nuxt Modules</a></li>
<li><a href="${"https://nuxt.com/docs/getting-started/introduction"}" rel="${"nofollow"}">Getting Started Guide</a></li>
<li><a href="${"https://www.youtube.com/watch?v=GBdO5myZNsQ&list=PL4cUxeGkcC9haQlqdCQyYmL_27TesCGPC&index=1"}" rel="${"nofollow"}">Nuxt 3 Youtube Tutorial Series</a></li></ul>
<hr>
<h2 id="${"nuxt-setup"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#nuxt-setup"}"><span class="${"icon icon-link"}"></span></a>Nuxt Setup</h2>
<ul><li><a href="${"https://nuxt.com/docs/getting-started/installation"}" rel="${"nofollow"}">Follow Project Setup Guide</a></li>
<li>Create a new project using this command: <code>npx nuxi init nuxt-app</code> (replace nuxt-app with the name of your app/site)</li>
<li>Navigate to the new project directory and run <code>npm install</code></li>
<li>You’re good to go! spin up a dev server with <code>npm run dev</code></li></ul>
<h3 id="${"file-structure-essentials"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#file-structure-essentials"}"><span class="${"icon icon-link"}"></span></a>File Structure Essentials</h3>
<ul><li><code>nuxt.config.ts</code>: add modules and set global defaults and settings here.</li>
<li><code>app.vue</code>: this is the main entrypoint to your page. It creates the default layout that your pages are injected into (you can move this file and rename it to <code>layouts/default.vue</code> in order to create other layouts if needed)</li>
<li><code>pages/</code>: create your web pages here (just like <code>views/</code> in a Vue app). They will be auto imported without any extra setup</li>
<li><code>components/</code>: add components here, they will also auto import and be available anywhere in your app</li></ul>
<h3 id="${"activity-create-a-new-page"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-create-a-new-page"}"><span class="${"icon icon-link"}"></span></a>Activity: Create a new page</h3>
<ul><li>add a new page to your <code>pages/</code> directory</li>
<li>use lowercase naming conventions (unlike vanilla vue)</li>
<li>Set up a vue single file component and render a some text</li>
<li>Create a link to the page using the following syntax on your <code>pages/index.vue</code> page:<ul><li><code>&lt;NuxtLink to=/page-name&quot;&gt;Page Name&lt;/NuxtLink&gt;</code></li></ul></li>
<li>Navigate to the page in a dev server</li></ul>
<h2 id="${"adding-modules"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#adding-modules"}"><span class="${"icon icon-link"}"></span></a>Adding Modules</h2>
<ul><li><a href="${"https://nuxt.com/modules/google-fonts"}" rel="${"nofollow"}">Google Fonts Module</a></li>
<li><a href="${"https://nuxt.com/modules/tailwindcss"}" rel="${"nofollow"}">Tailwind Module</a></li>
<li><a href="${"https://nuxt.com/modules/lodash"}" rel="${"nofollow"}">Lodash</a></li>
<li><a href="${"https://nuxt.com/modules/strapi"}" rel="${"nofollow"}">Strapi</a></li></ul>
<h3 id="${"activity-add-tailwind-following-the-documentation-linked-above"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-add-tailwind-following-the-documentation-linked-above"}"><span class="${"icon icon-link"}"></span></a>Activity: Add Tailwind following the documentation linked above</h3>
<ul><li>Install the module</li>
<li>Add it to the nuxt config file</li>
<li>Test out some utility classes</li></ul>
<h2 id="${"lets-create-components"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#lets-create-components"}"><span class="${"icon icon-link"}"></span></a>Let’s Create Components!</h2>
<ul><li>Just like in vue, create your components in your components directory, but now you don’t need to import them individually!</li></ul>
<h3 id="${"demonstrationactivity"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#demonstrationactivity"}"><span class="${"icon icon-link"}"></span></a>Demonstration/Activity</h3>
<ul><li>Recreate the <a href="${"https://www.smashingmagazine.com/"}" rel="${"nofollow"}">3 card layout on Smashing Magazine’s Homepage</a></li>
<li>Topics<ul><li>Reusable Custom Card Component</li>
<li>List Rendering with v-for</li>
<li><code>&lt;NuxtLink&gt;</code> built in component</li>
<li>Tailwind for quick styling</li></ul></li></ul>
<h4 id="${"breakouts-activities"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#breakouts-activities"}"><span class="${"icon icon-link"}"></span></a>Breakouts Activities</h4>
<p><em>We will pause throughout building for people to follow along with these tasks</em></p>
<ol><li>Set up your card component<ul><li>Create a <code>components/AppCard.vue</code> file and add minimal content</li>
<li>Add the card to your <code>pages/index.vue</code> page</li>
<li>Make sure you can see it using the dev server</li></ul></li>
<li>Create Props and Add Default Placeholder Content<ul><li>Content Props (text)</li>
<li>Set up html to render default values</li></ul></li>
<li>Add your Card Data to the <code>index.vue</code> page<ul><li>Create an array of 3 objects</li>
<li>Add these keys + values for each:<ul><li>title</li>
<li>description</li>
<li>buttonUrl</li>
<li>buttonText</li></ul></li>
<li><strong>These should match your props</strong></li></ul></li>
<li>Loop through and render your cards<ul><li><code>v-for</code> loop</li>
<li><code>v-bind</code> prop values</li></ul></li>
<li>Add Color Props and Class Bindings<ul><li>Add a color and bgColor prop in the component</li>
<li>Set up class bindings on the relevant tags</li>
<li>Add the values to each card (green, orange, purple)</li>
<li>Bind the colors to the component on the <code>index.vue</code> page</li></ul></li></ol>
<hr>
<h2 id="${"lab-time"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#lab-time"}"><span class="${"icon icon-link"}"></span></a>Lab Time</h2>
<ul><li>1:1 Sessions</li>
<li>Check out some Tutorials</li></ul>`;
});

export { _18_day_18 as default, metadata };
