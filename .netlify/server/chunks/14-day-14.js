import { c as create_ssr_component } from './index.js';

/* src/lib/content/courses/cpnt-262/14-day-14.md generated by Svelte v3.55.0 */

const metadata = {
	"title": "Project Structure and DRY Code",
	"excerpt": null,
	"status": "draft"
};

const _14_day_14 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<h2 id="${"assignment-3-crafting-components"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#assignment-3-crafting-components"}"><span class="${"icon icon-link"}"></span></a>Assignment 3: Crafting Components</h2>
<ul><li>Due Monday November 21st</li>
<li>Weight: 10%</li>
<li>Build and apply 5 components to a Vue app</li></ul>
<h2 id="${"props"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#props"}"><span class="${"icon icon-link"}"></span></a>Props</h2>
<ul><li><a href="${"https://vuejs.org/guide/components/props.htm"}" rel="${"nofollow"}">Documentation</a></li>
<li>Props are a convention in many frameworks, they refer to how variables are passed between parent and child components</li>
<li>By using props, you can set a component’s layout to be specific about how it displays information from the parent component</li>
<li>Note that the options api and composition api use different syntax to define props</li>
<li>Props are a <strong>one way data flow</strong> from parent to child (page to component)</li></ul>
<h3 id="${"tips"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#tips"}"><span class="${"icon icon-link"}"></span></a>Tips</h3>
<ul><li>When defining props, make sure to define their variable type (ie: string, array…)</li></ul>
<h3 id="${"activity"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity"}"><span class="${"icon icon-link"}"></span></a>Activity</h3>
<ul><li>Set up a prop on your <code>AppHeader.vue</code> component</li>
<li>use it to take the page title and description text from the <code>app.vue</code> page. This component would take the h1 tag content and actions</li></ul>
<hr>
<h2 id="${"components"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#components"}"><span class="${"icon icon-link"}"></span></a>Components</h2>
<ul><li><a href="${"https://vuejs.org/guide/essentials/component-basics.html"}" rel="${"nofollow"}">Vue Components Documentation</a></li>
<li>Single File Components are nested within one another and on pages to build a website.</li>
<li>Follow <a href="${"https://vuejs.org/style-guide/"}" rel="${"nofollow"}">the style guide</a> on naming components</li>
<li>You will need to use es6 import syntax to add components to vue files (in nuxt, this behaviour requires less work)</li></ul>
<h3 id="${"why-components"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#why-components"}"><span class="${"icon icon-link"}"></span></a>Why components?</h3>
<ul><li>components allow you to create reusable code (edit once, fix everywhere)</li>
<li>They make it easier to spot errors</li>
<li>They also make it easier to upgrade your code over time</li>
<li>Modularity is awesome</li></ul>
<h3 id="${"component-naming"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#component-naming"}"><span class="${"icon icon-link"}"></span></a>Component Naming</h3>
<ul><li>2+ word names</li>
<li>Prefix general components with <strong>App</strong>, <strong>V</strong>, or <strong>Base</strong><ul><li>ie: <code>AppHeader.vue</code> for page headers, <code>AppList.vue</code>and <code>AppListItem.vue</code></li></ul></li>
<li>Prefix UI components that only show up once per page with <strong>The</strong></li>
<li>Use consistent naming conventions:<ul><li>ie:<ul><li><code>TheNav.vue</code></li>
<li><code>TheNavLink.vue</code></li>
<li><code>TheFooter.vue</code></li>
<li><code>AppCard.vue</code></li>
<li><code>AppCardImage.vue</code></li>
<li>and so on…</li></ul></li></ul></li></ul>
<h3 id="${"activity-setting-up-a-layout-component"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-setting-up-a-layout-component"}"><span class="${"icon icon-link"}"></span></a>Activity: Setting up a Layout Component</h3>
<ul><li>Create an <code>AppHeader.vue</code> component and add it to an <code>app.vue</code> page</li>
<li>set up your props:<ul><li>background color</li>
<li>h1 headline text</li>
<li>paragraph description text</li></ul></li>
<li>Apply your AppHeader to the HomeView and AboutView</li>
<li>Create an <code>AppButton.vue</code> component and set it to take text as a prop<ul><li>Add it to the header</li></ul></li></ul>
<h3 id="${"types-of-components"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#types-of-components"}"><span class="${"icon icon-link"}"></span></a>Types of Components</h3>
<ul><li>Note: For small projects, you can keep all your components in the <code>components</code> folder. Your naming convention should be consistent to allow for easy searching.</li>
<li>However it can be helpful to organize your code into subfolders too</li>
<li>UI<ul><li>Specific, used for UI elements like the navbar, footer, dashboards (anything that has recurring information)</li></ul></li>
<li>Layout<ul><li>Generic, used to organize information, might contain some recurring component specific content</li>
<li>page headers, sections, gallery layouts</li></ul></li>
<li>Utilities<ul><li>Generic, small components such as buttons, links, headlines. These can make great use of slots as well as props</li></ul></li></ul>
<h3 id="${"activity-set-up-ui-and-utility-components"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-set-up-ui-and-utility-components"}"><span class="${"icon icon-link"}"></span></a>Activity: Set up UI and Utility Components</h3>
<ul><li>Create a topbar component called either <code>TheHeader.vue</code> or <code>TheNav.vue</code>, create reusable child components such as <code>TheNavLink.vue</code><ul><li>Set them up to take placeholder text as props</li>
<li>Use them to make a topbar (if you genrally use different conventions, feel free to change it up)</li>
<li>Add the topbar to <code>App.vue</code></li>
<li>Don’t worry about adding lots of styles, focus on making sure that the data renders correctly first</li></ul></li></ul>
<hr>
<h2 id="${"props-1"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#props-1"}"><span class="${"icon icon-link"}"></span></a>Props</h2>
<ul><li><a href="${"https://vuejs.org/guide/components/props.htm"}" rel="${"nofollow"}">Documentation</a></li>
<li>Props are a convention in many frameworks, they refer to how variables are passed between parent and child components</li>
<li>By using props, you can set a component’s layout to be specific about how it displays information from the parent component</li>
<li>Note that the options api and composition api use different syntax to define props</li>
<li>Props are a <strong>one way data flow</strong> from parent to child (page to component)</li></ul>
<h3 id="${"tips-1"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#tips-1"}"><span class="${"icon icon-link"}"></span></a>Tips</h3>
<ul><li>When defining props, make sure to define their variable type (ie: string, array…)</li></ul>
<h3 id="${"activity-1"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#activity-1"}"><span class="${"icon icon-link"}"></span></a>Activity</h3>
<ul><li>Set up a prop on your <code>AppHeader.vue</code> component</li>
<li>use it to take the page title and hero description text from the <code>app.vue</code> page</li></ul>
<hr>
<h2 id="${"list-rendering"}"><a aria-hidden="${"true"}" tabindex="${"-1"}" href="${"#list-rendering"}"><span class="${"icon icon-link"}"></span></a>List Rendering</h2>
<ul><li><a href="${"https://vuejs.org/guide/essentials/list.html"}" rel="${"nofollow"}">Vue List Rendering Docs</a></li>
<li>Use v-for to render a loop of information</li>
<li>It <strong>must</strong> have a key added. which should be the name of the iterator + .id</li>
<li>example (will print out a list of hero names providing that <code>heroes</code> exists as a list)</li>
<li><code>v-for</code> is one of the most used directives along with v-bind and v-on</li>
<li>when you specific <code>item in items</code> the “items” must refer to the actual variable that you’re iterating through, but the word “item” can be anything that you want to use as an interator</li></ul>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">&lt;ul&gt;
  &lt;li v-for=&quot;hero in heroes&quot; :key=&quot;hero.id&quot;&gt;
  &#123;&#123; hero.name &#125;&#125;
  &lt;/li&gt;
&lt;/ul&gt;</code>`}<!-- HTML_TAG_END --></pre>
<ul><li><a href="${"https://vuejs.org/guide/essentials/list.html"}" rel="${"nofollow"}">Vue List Rendering Docs</a></li>
<li>Use v-for to render a loop of information</li>
<li>It <strong>must</strong> have a key added. which should be the name of the iterator + .id</li>
<li>example (will print out a list of hero names providing that <code>heroes</code> exists as a list)</li>
<li><code>v-for</code> is one of the most used directives along with v-bind and v-on</li>
<li>when you specific <code>item in items</code> the “items” must refer to the actual variable that you’re iterating through, but the word “item” can be anything that you want to use as an interator</li></ul>
<pre class="${"language-undefined"}"><!-- HTML_TAG_START -->${`<code class="language-undefined">&lt;ul&gt;
  &lt;li v-for=&quot;hero in heroes&quot; :key=&quot;hero.id&quot;&gt;
  &#123;&#123; hero.name &#125;&#125;
  &lt;/li&gt;
&lt;/ul&gt;</code>`}<!-- HTML_TAG_END --></pre>`;
});

export { _14_day_14 as default, metadata };
